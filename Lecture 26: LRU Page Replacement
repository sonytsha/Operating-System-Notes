LRU policy

Idea: Remove ones that were used last

Advantage: It is designed keeping in mind the principle of locality - it is more likely that the recently used page will be reused.












( Yellow ones indicate the next page to be replaced, i.e. the least recently used page, among the other pages in the RAM )

For random cases, it might happen that LRU policy might perform worse than other page replacement policies.

Cons of LRU:

Implementing LRU is a problem in itself because its implementation takes a lot of time and space.

LRU approximation - an improvement over LRU

Idea: Reference bits need to be introduced in the page table. Initially, all reference bits are 0. They are changed to 1 when a page is accessed. Each page has its own reference bits.

Suppose RAM is filled with pages 1,2,3 and 4, and initially the reference bits are:




And now pages accessed are 3,1,1,3,5,2





The moment we arrive at 5, we check pages with reference bits 0. We randomly replace any of those pages - which is an approximation of LRU ( since pages with ref bits 1 are used recently and vice versa )

If every bit is 1, ( ref bits of all pages in RAM are 1 and we need to do replacement ). Then again, there will be a random replacement among them.

Algorithm:

Find the set of pages with reference bit 0
If none of the pageâ€™s reference bit is 0, randomly replace any page from the RAM
Else, replace any of the page with reference bit 0.
